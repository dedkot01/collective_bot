import telegram
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters

from sqlalchemy.orm import Session

from models.achievement import Achievement
from models.transaction import Transaction
from models.user import User
from main import engine


menu_keyboard = ReplyKeyboardMarkup([
    ['üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ üìä'],
])

admin_keyboard = ReplyKeyboardMarkup([
    ['–ü–æ–≤—ã—Å–∏—Ç—å —Ö–∞—Ä-–∫—É'],
    ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'],
])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    with Session(engine) as session:
        user = User.get_or_reg(user_id, session)
        if user.is_admin:
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–æ–≤–∞—Ä–∏—â! üòÉ\n'
                    '–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –ö–û–õ–õ–ï–ö–¢–ò–í üòâ\n'
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—éüì±\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞—Å–ª—É–≥–∏ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∏—â–µ–π –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ üìú'
                ),
                reply_markup=admin_keyboard,
            )
        else:
            params = context.args
            if len(params) == 0:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(
                        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–æ–≤–∞—Ä–∏—â! üòÉ\n'
                        '–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –ö–û–õ–õ–ï–ö–¢–ò–í üòâ\n'
                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—éüì±\n'
                        '–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ö–û–õ–õ–ï–ö–¢–ò–í–û–ú –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—á–∏—Ç—ã–≤–∞—Ç—å QR –∫–æ–¥—ã üìú\n'
                        '–†–∞–∑–≤–∏–≤–∞–π —Å–≤–æ—é —Å–∏–ª—É üí™, –ª–æ–≤–∫–æ—Å—Ç—å ü§∏‚Äç‚ôÄÔ∏è –∏ –∑–Ω–∞–Ω–∏—è üìö\n'
                        '–î–æ—Å—Ç–∏–≥–∞–π –≤—ã—Å–æ—Ç –≤–æ —Å–ª–∞–≤—É –≤—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞! üéñ\n'
                        '–£–†–ê, –¢–û–í–ê–†–ò–©! üéâ'
                    ),
                    reply_markup=menu_keyboard,
                )
            elif len(params) == 1:
                transaction_id = params[0]
                transaction = Transaction.get(transaction_id, session)
                if transaction is None:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text='‚ùå –û–®–ò–ë–ö–ê! –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        reply_markup=menu_keyboard,
                    )
                elif transaction.user is not None:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text='‚ùå –û–®–ò–ë–ö–ê! –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
                        reply_markup=menu_keyboard,
                    )
                else:
                    if transaction.action in ['up_strength', 'up_agility', 'up_knowledge']:
                        if transaction.action == 'up_strength':
                            user.strength += transaction.amount
                            msg_for_user = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–æ–≤–∞—Ä–∏—â! –í–∞—à–∞ —Å–∏–ª–∞ üí™ –≤–æ–∑—Ä–æ—Å–ª–∞ –Ω–∞ {transaction.amount}'
                        elif transaction.action == 'up_agility':
                            user.agility += transaction.amount
                            msg_for_user = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–æ–≤–∞—Ä–∏—â! –í–∞—à–∞ –ª–æ–≤–∫–æ—Å—Ç—å ü§∏‚Äç‚ôÄÔ∏è –≤–æ–∑—Ä–æ—Å–ª–∞ –Ω–∞ {transaction.amount}'
                        elif transaction.action == 'up_knowledge':
                            user.knowledge += transaction.amount
                            msg_for_user = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–æ–≤–∞—Ä–∏—â! –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è üìö –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {transaction.amount}'

                        transaction.user = user.id
                        session.commit()

                        await context.bot.send_message(
                            chat_id=user_id,
                            text=msg_for_user,
                            reply_markup=menu_keyboard,
                        )

                        await context.bot.send_message(
                            chat_id=int(transaction.author),
                            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥ {transaction.id}',
                        )

                        achievements = Achievement.get_all(session)
                        for achievement in achievements:
                            if (
                                (achievement not in user.knowed_achievements)
                                and (user.strength >= achievement.req_strength)
                                and (user.agility >= achievement.req_agility)
                                and (user.knowledge >= achievement.req_knowledge)
                            ):
                                user.knowed_achievements.append(achievement)
                                session.commit()

                                await context.bot.send_message(
                                    chat_id=user_id,
                                    text=(
                                        f'–¢–æ–≤–∞—Ä–∏—â! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ üìú —Ç–∞–ª–æ–Ω üìú <b>"{achievement.description}"</b>\n'
                                        f'–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –±–∞—Ä–µ –Ω–∞ {achievement.award}'
                                    ),
                                    parse_mode=telegram.constants.ParseMode.HTML,
                                    reply_markup=menu_keyboard,
                                )
                    elif transaction.action == 'give_ach':
                        achievement = Achievement.get_by_id(session, id_achievement=transaction.amount)
                        if achievement is None:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text='‚ùå –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´! –¢–∞–∫–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ö–æ–ª–ª–µ–∫—Ç–∏–≤–∞',
                                reply_markup=menu_keyboard,
                            )
                        elif achievement in user.achievements:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text='‚ùå –û–®–ò–ë–ö–ê! –†–∞–Ω–µ–µ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
                                reply_markup=menu_keyboard,
                            )
                        elif (
                            (user.strength < achievement.req_strength)
                            or (user.agility < achievement.req_agility)
                            or (user.knowledge < achievement.req_knowledge)
                        ):
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=(
                                    '‚ùå –û–®–ò–ë–ö–ê! –í–∞—à–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n'
                                    f'\n–¢—Ä–µ–±—É–µ—Ç—Å—è {achievement.req_strength} —Å–∏–ª—ã üí™, {achievement.req_agility} –ª–æ–≤–∫–æ—Å—Ç–∏ ü§∏‚Äç‚ôÄÔ∏è'
                                    f' –∏ {achievement.req_knowledge} –∑–Ω–∞–Ω–∏—è üìö'
                                    f'\n–£ –≤–∞—Å {user.strength} —Å–∏–ª—ã, {user.agility} –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ {user.knowledge} –∑–Ω–∞–Ω–∏—è'
                                ),
                                reply_markup=menu_keyboard,
                            )
                        else:
                            user.achievements.append(achievement)
                            transaction.user = user.id
                            session.commit()

                            await context.bot.send_message(
                                chat_id=int(transaction.author),
                                text=(
                                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥ {transaction.id}'
                                    f'\n‚≠êÔ∏è –ï–º—É –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞: {achievement.award}'
                                ),
                            )

                            await context.bot.send_message(
                                chat_id=user_id,
                                text=f'‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É –Ω–∞–≥—Ä–∞–¥—É, —Ç–æ–≤–∞—Ä–∏—â!\n{achievement.award}',
                                reply_markup=menu_keyboard,
                            )


async def characteristics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with Session(engine) as session:
        user: User = User.get_or_reg(update.effective_chat.id, session)
        session.commit()

        if not user.is_admin:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=(
                    f'–°–∏–ª–∞ üí™: {user.strength}\n'
                    f'–õ–æ–≤–∫–æ—Å—Ç—å ü§∏‚Äç‚ôÄÔ∏è: {user.agility}\n'
                    f'–ó–Ω–∞–Ω–∏—è üìö: {user.knowledge}\n'
                ),
                reply_markup=menu_keyboard,
            )


start_handler = CommandHandler('start', start)
characteristics_handler = MessageHandler(filters.Text('üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ üìä'), characteristics)
